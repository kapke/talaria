var EntityConfig = require('./EntityConfig');
var EntityInfo = require('./EntityInfo');
var Repository = require('./Repository');
var Proxy = require('./Proxy');
var UnitOfWork = require('./UnitOfWork');
var InMemoryStrategy = require('./PersistenceStrategy/InMemoryStrategy');
var Talaria = (function () {
    function Talaria() {
        this.defaultStrategy = new InMemoryStrategy();
        this.unitOfWork = new UnitOfWork(this.defaultStrategy);
        this.entities = {};
        this.repositories = {};
    }
    Talaria.getInstance = function () {
        if (!Talaria.instance) {
            Talaria.instance = new Talaria();
        }
        return Talaria.instance;
    };
    Talaria.prototype.registerEntity = function (constructor, config) {
        this.entities[config.name] = new EntityInfo(constructor, config);
    };
    Talaria.prototype.getEntityInfo = function (name) {
        return this.entities[name];
    };
    Talaria.prototype.getRepository = function (name) {
        if (!this.repositories[name]) {
            this.repositories[name] = new Repository(this.getEntityInfo(name), this.unitOfWork, this.defaultStrategy);
        }
        return this.repositories[name];
    };
    Talaria.prototype.setDefaultStrategy = function (strategy) {
        this.defaultStrategy = strategy;
        this.unitOfWork = new UnitOfWork(strategy);
    };
    Talaria.prototype.getDefaultStrategy = function () {
        return this.defaultStrategy;
    };
    Talaria.prototype.getDefaultUnitOfWork = function () {
        return this.unitOfWork;
    };
    Talaria.EntityInfo = EntityInfo;
    Talaria.EntityConfig = EntityConfig;
    Talaria.Proxy = Proxy;
    Talaria.Repository = Repository;
    Talaria.UnitOfWork = UnitOfWork;
    return Talaria;
})();
module.exports = Talaria;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhbGFyaWEudHMiXSwibmFtZXMiOlsiVGFsYXJpYSIsIlRhbGFyaWEuY29uc3RydWN0b3IiLCJUYWxhcmlhLmdldEluc3RhbmNlIiwiVGFsYXJpYS5yZWdpc3RlckVudGl0eSIsIlRhbGFyaWEuZ2V0RW50aXR5SW5mbyIsIlRhbGFyaWEuZ2V0UmVwb3NpdG9yeSIsIlRhbGFyaWEuc2V0RGVmYXVsdFN0cmF0ZWd5IiwiVGFsYXJpYS5nZXREZWZhdWx0U3RyYXRlZ3kiLCJUYWxhcmlhLmdldERlZmF1bHRVbml0T2ZXb3JrIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPLFlBQVksV0FBVyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2hELElBQU8sVUFBVSxXQUFXLGNBQWMsQ0FBQyxDQUFDO0FBQzVDLElBQU8sVUFBVSxXQUFXLGNBQWMsQ0FBQyxDQUFDO0FBQzVDLElBQU8sS0FBSyxXQUFXLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLElBQU8sVUFBVSxXQUFXLGNBQWMsQ0FBQyxDQUFDO0FBRzVDLElBQU8sZ0JBQWdCLFdBQVcsd0NBQXdDLENBQUMsQ0FBQztBQUU1RSxJQUFNLE9BQU87SUFBYkEsU0FBTUEsT0FBT0E7UUFnQkRDLG9CQUFlQSxHQUF5QkEsSUFBSUEsZ0JBQWdCQSxFQUFFQSxDQUFDQTtRQUMvREEsZUFBVUEsR0FBZ0JBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1FBQy9EQSxhQUFRQSxHQUFnQ0EsRUFBRUEsQ0FBQ0E7UUFDM0NBLGlCQUFZQSxHQUFxQ0EsRUFBRUEsQ0FBQ0E7SUE2QmhFQSxDQUFDQTtJQXZDaUJELG1CQUFXQSxHQUF6QkE7UUFDSUUsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkJBLE9BQU9BLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3JDQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFPTUYsZ0NBQWNBLEdBQXJCQSxVQUF1QkEsV0FBZUEsRUFBRUEsTUFBbUJBO1FBQ3ZERyxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFDQSxXQUFXQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUNyRUEsQ0FBQ0E7SUFFTUgsK0JBQWFBLEdBQXBCQSxVQUFzQkEsSUFBV0E7UUFDN0JJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQy9CQSxDQUFDQTtJQUVNSiwrQkFBYUEsR0FBcEJBLFVBQXlCQSxJQUFXQTtRQUNoQ0ssRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLFVBQVVBLENBQUlBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1FBQ2pIQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFFTUwsb0NBQWtCQSxHQUF6QkEsVUFBMkJBLFFBQThCQTtRQUNyRE0sSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFDaENBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLFVBQVVBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQy9DQSxDQUFDQTtJQUVNTixvQ0FBa0JBLEdBQXpCQTtRQUNJTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFTVAsc0NBQW9CQSxHQUEzQkE7UUFDSVEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7SUFDM0JBLENBQUNBO0lBOUNhUixrQkFBVUEsR0FBR0EsVUFBVUEsQ0FBQ0E7SUFDeEJBLG9CQUFZQSxHQUFHQSxZQUFZQSxDQUFDQTtJQUM1QkEsYUFBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFDZEEsa0JBQVVBLEdBQUdBLFVBQVVBLENBQUNBO0lBQ3hCQSxrQkFBVUEsR0FBR0EsVUFBVUEsQ0FBQ0E7SUEyQzFDQSxjQUFDQTtBQUFEQSxDQWhEQSxBQWdEQ0EsSUFBQTtBQUVELEFBQWlCLGlCQUFSLE9BQU8sQ0FBQyIsImZpbGUiOiJUYWxhcmlhLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL2thcGtlL3Byb2plY3RzL3RhbGFyaWEvIiwic291cmNlc0NvbnRlbnQiOltdfQ==